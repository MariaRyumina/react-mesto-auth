{"ast":null,"code":"class Api {\n  constructor({\n    baseUrl,\n    headers\n  }) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  //проверка корректности ответа, вызывать при каждом запросе\n  _handleResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(res.status);\n  }\n\n  //загрузка информации о пользователе с сервера\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(res => this._handleResponse(res));\n  }\n\n  //загрузка карточек с сервера\n  getCardList() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(res => this._handleResponse(res));\n  }\n\n  //загрузка новой информации о пользователе на сервер\n  patchUserInfo({\n    name,\n    about\n  }) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    }).then(res => this._handleResponse(res));\n  }\n\n  //обновление аватара пользователя\n  updateUserAvatar({\n    avatar\n  }) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar\n      })\n    }).then(res => this._handleResponse(res));\n  }\n\n  //загрузка новой карточки на сервер\n  addCard({\n    name,\n    link\n  }) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(res => this._handleResponse(res));\n  }\n\n  //запрос на удаление карточки\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._handleResponse(res));\n  }\n  likeCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(res => this._handleResponse(res));\n  }\n  dislikeCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._handleResponse(res));\n  }\n  changeLikeCardStatus(id, isLike) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, isLike ? {\n      method: 'PUT',\n      headers: this._headers\n    } : {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._handleResponse(res));\n  }\n}\nexport const api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-71',\n  headers: {\n    authorization: '4007c4a6-1dc8-477b-8692-004338e6361b',\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"names":["Api","constructor","baseUrl","headers","_baseUrl","_headers","_handleResponse","res","ok","json","Promise","reject","status","getUserInfo","fetch","then","getCardList","patchUserInfo","name","about","method","body","JSON","stringify","updateUserAvatar","avatar","addCard","link","deleteCard","id","likeCard","dislikeCard","changeLikeCardStatus","isLike","api","authorization"],"sources":["/Users/r-maria/Desktop/dev/mesto-react/src/utils/Api.js"],"sourcesContent":["class Api {\n    constructor({ baseUrl, headers }) {\n        this._baseUrl = baseUrl;\n        this._headers = headers;\n    }\n\n    //проверка корректности ответа, вызывать при каждом запросе\n    _handleResponse (res) {\n        if (res.ok) {\n            return res.json()\n        }\n        return Promise.reject(res.status)\n    }\n\n    //загрузка информации о пользователе с сервера\n    getUserInfo() {\n        return fetch(`${this._baseUrl}/users/me`, {\n            headers: this._headers\n        })\n            .then(res => this._handleResponse(res))\n    }\n\n    //загрузка карточек с сервера\n    getCardList() {\n        return fetch(`${this._baseUrl}/cards`, {\n            headers: this._headers\n        })\n            .then(res => this._handleResponse(res))\n\n    }\n\n    //загрузка новой информации о пользователе на сервер\n    patchUserInfo({ name, about }) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({ name, about })\n        })\n            .then(res => this._handleResponse(res))\n\n    }\n\n    //обновление аватара пользователя\n    updateUserAvatar({ avatar }) {\n        return fetch(`${this._baseUrl}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({ avatar })\n        })\n            .then(res => this._handleResponse(res))\n\n    }\n\n    //загрузка новой карточки на сервер\n    addCard({ name, link}) {\n        return fetch(`${this._baseUrl}/cards`, {\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({ name, link })\n        })\n            .then(res => this._handleResponse(res))\n    }\n\n    //запрос на удаление карточки\n    deleteCard(id) {\n        return fetch(`${this._baseUrl}/cards/${id}`, {\n            method: 'DELETE',\n            headers: this._headers,\n        })\n            .then(res => this._handleResponse(res))\n    }\n\n    likeCard(id) {\n        return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n            method: 'PUT',\n            headers: this._headers,\n        })\n            .then(res => this._handleResponse(res))\n    }\n\n    dislikeCard(id) {\n        return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n            method: 'DELETE',\n            headers: this._headers,\n        })\n            .then(res => this._handleResponse(res))\n    }\n\n    changeLikeCardStatus(id, isLike) {\n        return fetch(`${this._baseUrl}/cards/${id}/likes`,\n            isLike ? {\n                method: 'PUT',\n                headers: this._headers\n            } : {\n                method: 'DELETE',\n                headers: this._headers\n            }\n        )\n            .then(res => this._handleResponse(res))\n    }\n}\n\nexport const api = new Api({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-71',\n    headers: {\n        authorization: '4007c4a6-1dc8-477b-8692-004338e6361b',\n        'Content-Type': 'application/json'\n    }\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}